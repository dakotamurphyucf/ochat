(* Generate CSV report listing which source modules already have markdown
   documentation under [docs-src/].  The tool reads the module catalogue
   generated by [module_catalogue] (csv located at [out/modules.csv]).

   For every implementation file (.ml) we derive the expected documentation path
   by prefixing the source path (without extension) with [docs-src/] and
   replacing the original [.ml] extension with [.doc.md].  Examples:

       lib/apply_patch.ml     ➔ docs-src/lib/apply_patch.doc.md
       lib/chat_tui/app.ml    ➔ docs-src/lib/chat_tui/app.doc.md
       bin/md_index.ml        ➔ docs-src/bin/md_index.doc.md

   The program outputs a CSV to [out/docs_coverage.csv] with columns:

       file,module,doc_exists,doc_path

   This report is later consumed by the README research workflow to pinpoint
   missing documentation areas.  The implementation avoids external
   dependencies beyond the OCaml standard library so that it can run in
   minimal environments (e.g. CI sandboxes).
*)

open Printf

let csv_row oc cells =
  let escape s =
    if String.contains s ',' || String.contains s '"' then
      "\"" ^ String.escaped s ^ "\""
    else
      s
  in
  output_string oc (String.concat "," (List.map escape cells));
  output_char oc '\n'

let () =
  let catalogue_path = Filename.concat "out" "modules.csv" in
  if not (Sys.file_exists catalogue_path) then begin
    eprintf "Error: expected catalogue %s – run `dune exec module_catalogue` first.\n" catalogue_path;
    exit 1
  end;

  let ic = open_in catalogue_path in
  let out_dir = Filename.concat (Sys.getcwd ()) "out" in
  (try Unix.mkdir out_dir 0o755 with Unix.Unix_error (Unix.EEXIST, _, _) -> ());
  let oc = open_out (Filename.concat out_dir "docs_coverage.csv") in
  (* copy header row from catalogue but adjust columns *)
  csv_row oc [ "file"; "module"; "doc_exists"; "doc_path" ];

  (* Skip header of catalogue *)
  let _header = input_line ic in
  (try
     while true do
       let line = input_line ic in
       match String.split_on_char ',' line with
       | file :: mod_name :: _rest ->
           let base_no_ext = Filename.chop_extension file in
           let doc_path = "docs-src/" ^ base_no_ext ^ ".doc.md" in
           let exists = Sys.file_exists doc_path in
           csv_row oc [ file; mod_name; string_of_bool exists; doc_path ]
       | _ -> ()
     done
   with End_of_file -> ());

  close_in ic;
  close_out oc;
  printf "Documentation coverage report written to %s\n" (Filename.concat out_dir "docs_coverage.csv")

