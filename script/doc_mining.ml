(*
   Aggregate existing markdown documentation found under [docs-src/] into a
   single, easy-to-browse artefact that later research tasks (and humans!) can
   consult while drafting the new README.

   The tool consumes the [`out/docs_coverage.csv`] report generated by
   [doc_coverage.ml].  For every row whose [doc_exists] = true it copies the
   referenced markdown file into the output directory preserving the original
   relative layout (e.g.  `docs-src/lib/apply_patch.doc.md` ➔
   `out/mined_docs/lib/apply_patch.doc.md`).  Additionally it concatenates all
   found documents into a single [`out/mined_docs/ALL_DOCS.md`] file, each
   preceded by a level-2 header with the module name and a comment containing
   the source path.  This consolidated file offers a quick full-text view that
   works nicely with editors’ fuzzy search.

   Any modules without markdown documentation are collected and written to
   [`out/mined_docs/missing_docs.csv`] so that follow-up tasks can prioritise
   writing new docs.

   The implementation purposefully sticks to the OCaml standard library to
   avoid pulling extra dependencies.
*)

open Printf

let ensure_dir path =
  match Sys.file_exists path with
  | true -> ()
  | false -> Unix.mkdir path 0o755

let copy_file ~src ~dst =
  let buffer_size = 4096 in
  let ic = open_in_bin src in
  let oc = open_out_bin dst in
  let buf = Bytes.create buffer_size in
  (try
     while true do
       let n = input ic buf 0 buffer_size in
       if n = 0 then raise End_of_file;
       output oc buf 0 n
     done
   with End_of_file -> ());
  close_in ic;
  close_out oc

let () =
  let coverage_csv = Filename.concat "out" "docs_coverage.csv" in
  if not (Sys.file_exists coverage_csv) then begin
    eprintf "Error: %s not found – run `dune exec doc_coverage` first.\n"
      coverage_csv;
    exit 1
  end;

  (* Prepare output dirs *)
  let out_root = Filename.concat (Sys.getcwd ()) "out" in
  let mined_root = Filename.concat out_root "mined_docs" in
  ensure_dir out_root;
  ensure_dir mined_root;

  let path_in_mined doc_path =
    (* Strip leading "docs-src/" *)
    let prefix = "docs-src/" in
    let rel =
      if String.starts_with ~prefix doc_path then
        String.sub doc_path (String.length prefix) (String.length doc_path - String.length prefix)
      else doc_path
    in
    Filename.concat mined_root rel
  in

  (* Ensure sub-directories exist when copying files *)
  let rec ensure_parents path =
    let dir = Filename.dirname path in
    if dir <> "." && not (Sys.file_exists dir) then begin
      ensure_parents dir;
      ensure_dir dir
    end
  in

  let all_docs_path = Filename.concat mined_root "ALL_DOCS.md" in
  let all_docs_oc = open_out all_docs_path in

  (* Write header for missing docs CSV *)
  let missing_csv_path = Filename.concat mined_root "missing_docs.csv" in
  let missing_oc = open_out missing_csv_path in
  output_string missing_oc "module,file,expected_doc\n";

  (* Iterate catalogue *)
  let lines =
    let ic = open_in coverage_csv in
    let rec loop acc =
      match input_line ic with
      | line -> loop (line :: acc)
      | exception End_of_file -> close_in ic; List.rev acc
    in
    loop []
  in

  (* Expect header at first line *)
  let lines = match lines with _hdr :: tl -> tl | [] -> [] in

  List.iter
    (fun line ->
       match String.split_on_char ',' line with
       | file :: mod_name :: doc_exists :: doc_path :: _ ->
           if doc_exists = "true" then begin
             let target = path_in_mined doc_path in
             ensure_parents target;
             (try copy_file ~src:doc_path ~dst:target with Sys_error _ -> ());
             (* Append to consolidated file *)
             fprintf all_docs_oc "\n\n## %s\n\n<!-- source: %s -->\n\n" mod_name doc_path;
             (try
                let ic = open_in doc_path in
                let rec copy_lines () =
                  match input_line ic with
                  | l -> fprintf all_docs_oc "%s\n" l; copy_lines ()
                  | exception End_of_file -> ()
                in
                copy_lines (); close_in ic
              with Sys_error _ -> ())
           end else begin
             fprintf missing_oc "%s,%s,%s\n" mod_name file doc_path
           end
       | _ -> ())
    lines;

  close_out all_docs_oc;
  close_out missing_oc;
  printf "Documentation mining complete – see %s\n" mined_root

