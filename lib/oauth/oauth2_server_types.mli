(** Server-side data structures for a *minimal* OAuth 2.0 implementation.

    The module groups together the three bare-bones JSON records that an
    OAuth 2.0 / OpenID Connect **Authorization Server** has to persist or
    hand out:

    • {!Token}   – Access token emitted by the [`token_endpoint`].
    • {!Metadata} – Sub-set of the *Authorization-Server Metadata* document
      served from `/.well-known/oauth-authorization-server`.
    • {!Client}  – Credentials created by the *Dynamic Client Registration*
      endpoint (RFC 7591).

    All records derive `{jsonaf, sexp, bin_io}` so they can be
    serialised/deserialised without hand-written code.  Unknown JSON fields
    are silently ignored in order to remain forward-compatible with future
    revisions of the specs.

    {1 Sub-modules}
    {ul
      {li {!module:Token}}
      {li {!module:Metadata}}
      {li {!module:Client}}
    }
*)

open Core

module Token : sig
  (** [t] models the JSON payload returned by a successful call to the
      [`token_endpoint`].

      Field meanings follow RFC 6749 §5.1 verbatim:

      • [access_token] – Opaque token that the resource server accepts.
      • [token_type]   – Usually "Bearer".
      • [expires_in]   – Lifetime in seconds from [obtained_at].
      • [obtained_at]  – Server-side timestamp (Unix epoch, seconds).
  *)

  type t =
    { access_token : string [@key "access_token"]
    ; token_type : string [@key "token_type"]
    ; expires_in : int [@key "expires_in"]
    ; obtained_at : float [@key "obtained_at"]
    }
  [@@deriving sexp, bin_io, jsonaf]
end

module Metadata : sig
  (** [t] captures the subset of the *Authorization-Server Metadata* (RFC
      8414) that the rest of the code base consumes.

      The server exposes exactly these fields so that plain clients can
      bootstrap themselves without downloading the full JWK set or other
      optional extensions.

      • [issuer]                 – URL that uniquely identifies this server.
      • [authorization_endpoint] – Endpoint for the *Authorization Code*
        flow.
      • [token_endpoint]         – Endpoint that exchanges codes/refresh
        tokens for an access token.
      • [registration_endpoint]  – Optional endpoint for Dynamic Client
        Registration.  `None` means that the feature is disabled. *)

  type t =
    { issuer : string [@key "issuer"]
    ; authorization_endpoint : string [@key "authorization_endpoint"]
    ; token_endpoint : string [@key "token_endpoint"]
    ; registration_endpoint : string option
          [@key "registration_endpoint" "registration_endpoint"]
    }
  [@@deriving sexp, bin_io, jsonaf]
end

(** {1 Dynamic Client Registration types} *)

module Client : sig
  (** [t] represents the credentials that this server issues during
      *Dynamic Client Registration* (RFC 7591).

      The record purposefully stores **only the minimal happy-path set of
      fields** required by the rest of the code base:

      • [client_id]     – Primary identifier generated by the server.
      • [client_secret] – Present for *confidential* clients, `None` for
        *public* ones.
      • [client_name]   – Optional human-readable label displayed in
        consent screens.
      • [redirect_uris] – Set of permissible redirect URIs.
      • [client_id_issued_at] / [client_secret_expires_at] – Timestamps that
        allow the server to expire credentials in future versions.
  *)

  type t =
    { client_id : string [@key "client_id"]
    ; client_secret : string option [@key "client_secret"]
    ; client_name : string option [@key "client_name"] [@jsonaf.option]
    ; redirect_uris : string list option [@key "redirect_uris"] [@jsonaf.option]
    ; client_id_issued_at : int option [@key "client_id_issued_at"] [@jsonaf.option]
    ; client_secret_expires_at : int option
          [@key "client_secret_expires_at"] [@jsonaf.option]
    }
  [@@deriving sexp, bin_io, jsonaf]
end
